/*********************************************************************************
 *
 *	Copyright (c) 2017-2024, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * Validated types for all URDF elements.
 */
functions
	/**
	 * Function to validate the top level robot record. This just
	 * calls the invariant function for the corresponding Robot validated type.
	 */
	validateURDF: robot +> bool
	validateURDF(r) == inv_Robot(r);

types
	Robot = robot
	inv r == allOf
	([
		-- Invariants of subelements (use apply[...](...) for sequences)
		apply[joint](inv_Joint, r.joints),
		apply[link](inv_Link, r.links),
		apply[material](inv_Material, r.materials),
		apply[transmission](inv_Transmission, r.transmissions),

		-- rules that span a robot go here
		jointsAndLinksMatch(r)
	]);

	Joint = [joint]
	inv j == j <> nil => allOf
	([
		-- Invariants of subelements
		inv_Origin(j.origin),
		inv_Axis(j.axis),
		inv_Calibration(j.calibration),
		inv_Dynamics(j.dynamics),
		inv_Limit(j.limit),
		inv_SafetyController(j.safety_controller),
		inv_Mimic(j.mimic)

		-- rules that span a single joint go here
	]);

	Link = [link]
	inv l == l <> nil => allOf
	([
		-- Invariants of subelements
		inv_Inertial(l.inertial),
		inv_Visual(l.visual),
		inv_Collision(l.collision)

		-- rules that span this element
	]);

	Inertial = [inertial]
	inv i == i <> nil => allOf
	([
		-- Invariants of subelements
		inv_Origin(i.origin),
		inv_Mass(i.mass),
		inv_Inertia(i.inertia)

		-- rules that span this element
	]);

	Mass = [mass]
	inv m == m <> nil => allOf
	([
		-- @DocLink("http://wiki.ros.org/urdf/XML/mass")
		-- @OnFail("Mass value %s must be positive at %#s", m.value, m.$loc)
		( m.value >= 0 )
	]);

	Inertia = [inertia]
	inv i == i <> nil => allOf
	([
		-- rules about ixx, ixy, ixz etc,
	]);

	Visual = [visual]
	inv v == v <> nil => allOf
	([
		-- Invariants of subelements
		inv_Origin(v.origin),
		inv_Geometry(v.geometry),
		inv_Material(v.material)

		-- rules that span this element
	]);

	Geometry = [geometry]
	inv g == g <> nil => allOf
	([
		-- Invariants of subelements
		inv_Box(g.box),
		inv_Cylinder(g.cylinder),
		inv_Sphere(g.sphere),
		inv_Mesh(g.mesh),

		-- rules that span this element
		-- @DocLink("http://wiki.ros.org/urdf/XML/geometry")
		-- @OnFail("Only one of box, cylinder, sphere or mesh at %#s", g.$loc)
		( card {g.box, g.cylinder, g.sphere, g.mesh, nil} = 2 )	-- Field and nil.
	]);

	Box = [box]
	inv b == b <> nil => allOf
	([
		-- rules about the size coordinates
	]);

	Cylinder = [cylinder]
	inv c == c <> nil => allOf
	([
		-- @DocLink("http://wiki.ros.org/urdf/XML/cylinder")
		-- @OnFail("Radius %s must be positive at %#s", c.radius, c.$loc)
		( c.radius > 0 ),

		-- @DocLink("http://wiki.ros.org/urdf/XML/cylinder")
		-- @OnFail("Length %s must be positive at %#s", c.length, c.$loc)
		( c.length > 0 )
	]);

	Sphere = [sphere]
	inv s == s <> nil => allOf
	([
		-- @DocLink("http://wiki.ros.org/urdf/XML/sphere")
		-- @OnFail("Radius %s must be positive at %#s", s.radius, s.$loc)
		( s.radius > 0 )
	]);

	Mesh = [mesh]
	inv m == m <> nil => allOf
	([
		-- rules about filename and scale
	]);

	Collision = [collision]
	inv c == c <> nil => allOf
	([
		-- Invariants of subelements
		inv_Origin(c.origin),
		inv_Geometry(c.geometry),
		inv_Verbose(c.verbose)

		-- rules that span this element
	]);

	Verbose = [verbose]
	inv v == v <> nil => allOf
	([
		-- rules about v.value
	]);

	Material = [material]
	inv m == m <> nil => allOf
	([
		-- Invariants of subelements
		inv_Color(m.color),
		inv_Texture(m.texture)

		-- rules that span this element
	]);

	Color = [color]
	inv c == c <>  nil => allOf
	([
		-- rules about rgba field
	]);

	Texture = [texture]
	inv t == t <> nil => allOf
	([
		-- rules about filename field
	]);

	Origin = [origin]
	inv x == x <> nil => allOf
	([
		-- rules about xyz and rpy
	]);

	Axis = [axis]
	inv x == x <> nil => allOf
	([
		-- rules about axis.xyz
	]);

	Calibration = [calibration]
	inv x == x <> nil => allOf
	([
		-- rules about reference_position, rising, falling
	]);

	Dynamics = [dynamics]
	inv x == x <> nil => allOf
	([
		-- rules about damping and friction
	]);

	Limit = [limit]
	inv x == x <> nil => allOf
	([
		-- rules about lower, upper, effort and velocity
	]);

	SafetyController = [safety_controller]
	inv x == x <> nil => allOf
	([
		-- rules about soft_lower_limit, soft_upper_limit, k_position, k_velocity
	]);

	Mimic = [mimic]
	inv x == x <> nil => allOf
	([
		-- rules about joint, multiplier, offset
	]);

	Transmission = [transmission]
	inv t == t <> nil => allOf
	([
		-- Invariants of subelements
		inv_ActuatorTx(t.leftActuator),
		inv_ActuatorTx(t.rightActuator),
		inv_ActuatorTx(t.flexJoint),
		inv_ActuatorTx(t.rollJoint),
		inv_GapJointTx(t.gap_joint),
		apply[passive_joint_transmission](inv_PassiveJointTx, t.passive_joint)

		-- rules that span this element
	]);

	ActuatorTx = [actuator_transmission]
	inv a == a <> nil => allOf
	([
		-- rules about mechanicalReduction, name
	]);

	GapJointTx = [gap_joint_transmission]
	inv g == g <> nil => allOf
	([
		-- rules about name,L0,a,b,gear_ratio,h,mechanical_reduction,phi0,r,screw_reduction,t0,theta0
	]);

	PassiveJointTx = passive_joint_transmission
	inv - == allOf
	([
		-- rules about name
	]);

