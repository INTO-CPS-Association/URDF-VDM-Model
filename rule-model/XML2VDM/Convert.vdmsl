/*********************************************************************************
 *
 *	Copyright (c) 2017-2024, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * Convert raw XML types to URDF types.
 */
functions
	convertRobot: [Element] +> [robot]
	convertRobot(xml) == if xml = nil then nil else
		mk_robot
		(
			xml.$loc,
			getAttr(xml, "name", nil),
			getAttr(xml, "version", "1.0"),
			[ convertJoint(j)			| j in seq getChildren(xml, "joint") ],
			[ convertLink(l)			| l in seq getChildren(xml, "link") ],
			[ convertMaterial(m)		| m in seq getChildren(xml, "material") ],
			[ convertTransmission(t)	| t in seq getChildren(xml, "transmission") ]
		)
	pre xml = nil or xml.type = "robot";

	convertJoint: [Element] +> [joint]
	convertJoint(xml) == if xml = nil then nil else
		mk_joint
		(
			xml.$loc,
			getAttr(xml, "name", nil),
			getAttr(xml, "type", nil),
			getAttr(getChild(xml, "parent"), "link", nil),
			getAttr(getChild(xml, "child"), "link", nil),
			convertOrigin(getChild(xml, "origin")),
			convertAxis(getChild(xml, "axis")),
			convertCalibration(getChild(xml, "calibration")),
			convertDynamics(getChild(xml, "dynamics")),
			convertLimit(getChild(xml, "limit")),
			convertSafetyController(getChild(xml, "safety_controller")),
			convertMimic(getChild(xml, "mimic"))
		)
	pre xml = nil or xml.type = "joint";

	convertLink: [Element] +> [link]
	convertLink(xml) == if xml = nil then nil else
		mk_link
		(
			xml.$loc,
			getAttr(xml, "name", nil),
			getAttr(xml, "type", nil),
			convertInertial(getChild(xml, "inertial")),
			convertVisual(getChild(xml, "visual")),
			convertCollision(getChild(xml, "collision"))
		)
	pre xml = nil or xml.type = "link";

	convertOrigin: [Element] +> [origin]
	convertOrigin(xml) == if xml = nil then nil else
		mk_origin
		(
			xml.$loc,
			isType[seq of real](xml.$loc, getAttr(xml, "xyz", [0,0,0])),
			isType[seq of real](xml.$loc, getAttr(xml, "rpy", [0,0,0]))
		)
	pre xml = nil or xml.type = "origin";

	convertAxis: [Element] +> [axis]
	convertAxis(xml) == if xml = nil then nil else
		mk_axis
		(
			xml.$loc,
			getAttr(xml, "xyz", [1, 0, 0])
		)
	pre xml = nil or xml.type = "axis";

	convertCalibration: [Element] +> [calibration]
	convertCalibration(xml) == if xml = nil then nil else
		mk_calibration
		(
			xml.$loc,
			getAttr(xml, "reference_position", 0),
			getAttr(xml, "rising", 0),
			getAttr(xml, "falling", 0)
		)
	pre xml = nil or xml.type = "calibration";

	convertDynamics: [Element] +> [dynamics]
	convertDynamics(xml) == if xml = nil then nil else
		mk_dynamics
		(
			xml.$loc,
			getAttr(xml, "damping", 0),
			getAttr(xml, "friction", 0)
		)
	pre xml = nil or xml.type = "dynamics";

	convertLimit: [Element] +> [limit]
	convertLimit(xml) == if xml = nil then nil else
		mk_limit
		(
			xml.$loc,
			getAttr(xml, "lower", 0),
			getAttr(xml, "upper", 0),
			getAttr(xml, "effort", 0),
			getAttr(xml, "velocity", 0)
		)
	pre xml = nil or xml.type = "limit";

	convertSafetyController: [Element] +> [safety_controller]
	convertSafetyController(xml) == if xml = nil then nil else
		mk_safety_controller
		(
			xml.$loc,
			getAttr(xml, "soft_lower_limit", 0),
			getAttr(xml, "soft_upper_limit", 0),
			getAttr(xml, "k_position", 0),
			getAttr(xml, "k_velocity", nil)
		)
	pre xml = nil or xml.type = "safety_controller";

	convertMimic: [Element] +> [mimic]
	convertMimic(xml) == if xml = nil then nil else
		mk_mimic
		(
			xml.$loc,
			getAttr(xml, "joint", nil),
			getAttr(xml, "multiplier", 1),
			getAttr(xml, "offset", 0)
		)
	pre xml = nil or xml.type = "mimic";

	convertInertial: [Element] +> [inertial]
	convertInertial(xml) == if xml = nil then nil else
		mk_inertial
		(
			xml.$loc,
			convertOrigin(getChild(xml, "origin")),
			convertMass(getChild(xml, "mass")),
			convertInertia(getChild(xml, "inertia"))
		)
	pre xml = nil or xml.type = "inertial";

	convertVisual: [Element] +> [visual]
	convertVisual(xml) == if xml = nil then nil else
		mk_visual
		(
			xml.$loc,
			convertOrigin(getChild(xml, "origin")),
			convertGeometry(getChild(xml, "geometry")),
			convertMaterial(getChild(xml, "material"))
		)
	pre xml = nil or xml.type = "visual";


	convertCollision: [Element] +> [collision]
	convertCollision(xml) == if xml = nil then nil else
		mk_collision
		(
			xml.$loc,
			getAttr(xml, "name", nil),
			convertOrigin(getChild(xml, "origin")),
			convertGeometry(getChild(xml, "geometry")),
			convertVerbose(getChild(xml, "verbose"))
		)
	pre xml = nil or xml.type = "collision";

	convertMass: [Element] +> [mass]
	convertMass(xml) == if xml = nil then nil else
		mk_mass
		(
			xml.$loc,
			getAttr(xml, "value", 0)
		)
	pre xml = nil or xml.type = "mass";

	convertInertia: [Element] +> [inertia]
	convertInertia(xml) == if xml = nil then nil else
		mk_inertia
		(
			xml.$loc,
			getAttr(xml, "ixx", 0),
			getAttr(xml, "ixy", 0),
			getAttr(xml, "ixz", 0),
			getAttr(xml, "iyy", 0),
			getAttr(xml, "iyz", 0),
			getAttr(xml, "izz", 0)
		)
	pre xml = nil or xml.type = "inertia";

	convertGeometry: [Element] +> [geometry]
	convertGeometry(xml) == if xml = nil then nil else
		mk_geometry
		(
			xml.$loc,
			convertBox(getChild(xml, "box")),
			convertCylinder(getChild(xml, "cylinder")),
			convertSphere(getChild(xml, "sphere")),
			convertMesh(getChild(xml, "mesh"))
		)
	pre xml = nil or xml.type = "geometry";


	convertVerbose: [Element] +> [verbose]
	convertVerbose(xml) == if xml = nil then nil else
		mk_verbose
		(
			xml.$loc,
			getAttr(xml, "value", nil)
		)
	pre xml = nil or xml.type = "verbose";

	convertBox: [Element] +> [box]
	convertBox(xml) == if xml = nil then nil else
		mk_box
		(
			xml.$loc,
			getAttr(xml, "size", [0, 0, 0])
		)
	pre xml = nil or xml.type = "box";

	convertCylinder: [Element] +> [cylinder]
	convertCylinder(xml) == if xml = nil then nil else
		mk_cylinder
		(
			xml.$loc,
			getAttr(xml, "radius", 0),
			getAttr(xml, "length", 0)
		)
	pre xml = nil or xml.type = "cylinder";

	convertSphere: [Element] +> [sphere]
	convertSphere(xml) == if xml = nil then nil else
		mk_sphere
		(
			xml.$loc,
			getAttr(xml, "radius", 0)
		)
	pre xml = nil or xml.type = "sphere";

	convertMesh: [Element] +> [mesh]
	convertMesh(xml) == if xml = nil then nil else
		mk_mesh
		(
			xml.$loc,
			getAttr(xml, "filename", nil),
			getAttr(xml, "scale", [1, 1, 1])
		)
	pre xml = nil or xml.type = "mesh";

	convertColor: [Element] +> [color]
	convertColor(xml) == if xml = nil then nil else
		mk_color
		(
			xml.$loc,
			getAttr(xml, "rgba", nil)
		)
	pre xml = nil or xml.type = "color";

	convertTexture: [Element] +> [texture]
	convertTexture(xml) ==  if xml = nil then nil else
		mk_texture
		(
			xml.$loc,
			getAttr(xml, "filename", nil)
		)
	pre xml = nil or xml.type = "texture";

	convertMaterial: [Element] +> [material]
	convertMaterial(xml) == if xml = nil then nil else
		mk_material
		(
			xml.$loc,
			getAttr(xml, "name", nil),
			convertColor(getChild(xml, "color")),
			convertTexture(getChild(xml, "texture"))
		)
	pre xml = nil or xml.type = "material";

	convertActuatorTx: [Element] +> [actuator_transmission]
	convertActuatorTx(xml) == if xml = nil then nil else
		mk_actuator_transmission
		(
			xml.$loc,
			getAttr(xml, "mechanicalReduction", nil),
			getAttr(xml, "name", nil)
		);
	-- Used for various element types in transmissions

	convertGapJointTx: [Element] +> [gap_joint_transmission]
	convertGapJointTx(xml) == if xml = nil then nil else
		mk_gap_joint_transmission
		(
			xml.$loc,
			getAttr(xml, "name", nil),
			getAttr(xml, "L0", nil),
			getAttr(xml, "a", nil),
			getAttr(xml, "b", nil),
			getAttr(xml, "gear_ratio", nil),
			getAttr(xml, "h", nil),
			getAttr(xml, "mechanical_reduction", nil),
			getAttr(xml, "phi0", nil),
			getAttr(xml, "r", nil),
			getAttr(xml, "screw_reduction", nil),
			getAttr(xml, "t0", nil),
			getAttr(xml, "theta0", nil)
		)
	pre xml = nil or xml.type = "gap_joint";

	convertPassiveJointTx: [Element] +> [passive_joint_transmission]
	convertPassiveJointTx(xml) ==  if xml = nil then nil else
		mk_passive_joint_transmission
		(
			xml.$loc,
			getAttr(xml, "name", nil)
		)
	pre xml = nil or xml.type = "passive_joint";

	convertTransmission: [Element] +> [transmission]
	convertTransmission(xml) == if xml = nil then nil else
		mk_transmission
		(
			xml.$loc,
			convertActuatorTx(getChild(xml, "leftActuator")),
			convertActuatorTx(getChild(xml, "rghtActuator")),
			convertActuatorTx(getChild(xml, "lexJoint")),
			convertActuatorTx(getChild(xml, "rollJoint")),
			convertGapJointTx(getChild(xml, "gap_joint")),
			[ convertPassiveJointTx(j) | j in seq getChildren(xml, "passive_joint") ],
			convertBoolean(getChild(xml, "use_simulated_gripper_joint")),
			convertDouble(getChild(xml, "mechanicalReduction")),
			convertName(getChild(xml, "actuator")),
			convertName(getChild(xml, "joint")),
			getAttr(xml, "name", nil),
			getAttr(xml, "type", nil)
		)
	pre xml = nil or xml.type = "transmission";

	convertName: [Element] +> [Name]
	convertName(xml) == if xml = nil then nil else
		getAttr(xml, "name", nil);
	-- pre any element that has a name attribute

	convertBoolean: [Element] +> bool
	convertBoolean(xml) ==
		xml <> nil;
	-- pre any element whose existence implies "true"

	convertDouble: [Element] +> [real]
	convertDouble(xml) == if xml = nil then nil else
		getContent(xml);
	-- pre assumes any content is a real
